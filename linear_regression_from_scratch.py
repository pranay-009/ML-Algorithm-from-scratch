# -*- coding: utf-8 -*-
"""Linear_Regression from scratch.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rFt2QP7wUdJrhedGxo7C2sKGM5ETnB2g
"""

import numpy as num
import sys
import matplotlib.pyplot as plt

class LinearRegression:
  def __init__(self,n_iter,learning_rate):
    self.learning_rate=learning_rate
    self.n_iter=n_iter
    self.weights=None
    self.bias=None

  def fit(self,x,y):
    n_samples,n_features=x.shape

    self.weights=num.zeros(n_features)
    self.bias=0
    for i in range(self.n_iter):
      predict=num.dot(x,self.weights) + self.bias

      error=predict-y
      dw=1/(n_samples)*(num.dot(x.T,error))
      db=1/(n_samples)*num.sum(error)
      self.weights=self.weights - self.learning_rate*dw
      self.bias=self.bias-self.learning_rate*db

  def predict(self,x):
    predict=num.dot(x,self.weights) + self.bias
    return predict

from sklearn import datasets
from sklearn.model_selection import train_test_split

X, y = datasets.make_regression(n_samples=100, n_features=1, noise=20, random_state=4 )
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1234)

linear=LinearRegression(1000,0.0001)

linear.fit(X_train,y_train)

predicted=linear.predict(X_train)

import math
def root_mean_square_error(predicted,true_reasult):
  return math.sqrt(1/len(predicted)*num.mean((predicted-true_reasult)**2))

root_mean_square_error(predicted,y_train)

len(predicted)

